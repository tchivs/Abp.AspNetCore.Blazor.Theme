@using Microsoft.JSInterop
@using Volo.Abp.Localization
@using System.Globalization
@using System.Collections.Immutable
@inject ILanguageProvider LanguageProvider
@inject IJSRuntime JsRuntime
@if (languages != null && _currentLanguage != null)
{
    <li class="nav-item dropdown">
        <a class="nav-link dropdown-toggle" href="#" id="languageDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
            @_currentLanguage.DisplayName
        </a>
        <ul class="dropdown-menu" aria-labelledby="navbarDropdown">
            @foreach (var lan in this.languages)
            {
                <li>
                    <a id="@lan.UiCultureName" class="@GetDropdownItemClass(lan)" @onclick="() => this.ChangeLanguageAsync(lan)" href="javascript:void()">@lan.DisplayName</a>
                </li>
            }

        </ul>
    </li>
}
@code {
    private IReadOnlyList<LanguageInfo>? languages;
    private LanguageInfo? _currentLanguage;
    string GetDropdownItemClass(LanguageInfo languageInfo)
    {
        if (languageInfo == _currentLanguage)
        {
            return "dropdown-item active";
        }
        return "dropdown-item";
    }
    protected override async Task OnInitializedAsync()
    {
        var selectedLanguageName = await JsRuntime.InvokeAsync<string>(
           "localStorage.getItem",
           "Abp.SelectedLanguage"
           );
        languages = await LanguageProvider.GetLanguagesAsync();
        _currentLanguage = languages.FindByCulture(selectedLanguageName);


    }

    private async Task ChangeLanguageAsync(LanguageInfo language)
    {
        await JsRuntime.InvokeVoidAsync(
            "localStorage.setItem",
            "Abp.SelectedLanguage", language.UiCultureName
            );

        await JsRuntime.InvokeVoidAsync("location.reload");
    }
}