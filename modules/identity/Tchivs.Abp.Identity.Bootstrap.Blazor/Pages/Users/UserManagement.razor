@page "/identity/users"
@attribute [Authorize(IdentityPermissions.Users.Default)]
@using Volo.Abp.Identity
@using Volo.Abp.Identity.Localization
@inherits BootstrapBlazorComponentBase

<TableEx TItem=IdentityUserDto
         TAppService=IIdentityUserAppService
         TKey=Guid TGetListInput=GetIdentityUsersInput
         TCreateInput=IdentityUserCreateDto
         TUpdateInput=IdentityUserUpdateDto
         AutoGenerateColumns="false"
         CreatePolicyName="@IdentityPermissions.Users.Create"
         UpdatePolicyName="@IdentityPermissions.Users.Update"
         DeletePolicyName="@IdentityPermissions.Users.Delete">
    <TableColumns>
        <TableColumn @bind-Field="@context.UserName" Text="@L["DisplayName:UserName"]"/>
        <TableColumn @bind-Field="@context.Email" Text="@L["DisplayName:Email"]"/>
        <TableColumn @bind-Field="@context.PhoneNumber" Text="@L["DisplayName:PhoneNumber"]"/>
        <TableColumn @bind-Field="@context.CreationTime" Text="@L["CreationTime"]" FormatString="yyyy-MM-dd"/>
    </TableColumns>
    <EditTemplate>
        <UserModal Model=@context></UserModal>
    </EditTemplate>
    <RowButtonTemplate>
        @if (this.HasManagePermissionsPermission)
        {
            <Button Size="Size.ExtraSmall" OnClick="@ClickPermissionCallback(context)" Color="Color.Secondary" Icon="fa fa-shield" Text="@L["Permissions"]"/>
        }
    </RowButtonTemplate>
</TableEx>
<PermissionModal @ref=_permissionModal></PermissionModal>

@code {
    protected bool HasManagePermissionsPermission { get; set; }

    public UserManagement()
    {
        LocalizationResource = typeof(IdentityResource);
    }

    protected override async Task OnInitializedAsync()
    {
        HasManagePermissionsPermission =
            await AuthorizationService.IsGrantedAsync(IdentityPermissions.Users.ManagePermissions);
    }

    EventCallback<MouseEventArgs> ClickPermissionCallback(IdentityUserDto item) =>
        EventCallback.Factory.Create<MouseEventArgs>(this, () => ShowPermission(item));

    PermissionModal _permissionModal;

    private async Task ShowPermission(IdentityUserDto context)
    {
        _permissionModal.ProviderKey = context.Id.ToString();
        _permissionModal.ProviderName = "U";
        await _permissionModal.ShowAsync();
    }

}