@using Volo.Abp.FeatureManagement
@using Volo.Abp.Validation.StringValues
@using Microsoft.Extensions.Localization
@using JetBrains.Annotations;
@using Microsoft.AspNetCore.Components;
@using Microsoft.Extensions.Options;
@using Volo.Abp.AspNetCore.Components.Messages;
@using Volo.Abp.AspNetCore.Components.Web.Configuration;
@using Volo.Abp.Features;
@using Volo.Abp.Localization;
@inherits BootstrapBlazorComponentBase
@inject IFeatureAppService FeatureAppService
@inject IUiMessageService UiMessageService
@inject IStringLocalizerFactory HtmlLocalizerFactory
@inject IOptions<AbpLocalizationOptions> LocalizationOptions
@inject ICurrentApplicationConfigurationCacheResetService CurrentApplicationConfigurationCacheResetService

@code {
    [Parameter] public string ProviderName { get; set; }
    [Parameter] public string ProviderKey { get; set; }
    protected string SelectedTabName;

    protected List<FeatureGroupDto> Groups { get; set; }

    protected Dictionary<string, bool> ToggleValues;

    protected Dictionary<string, string> SelectionStringValues;

    public virtual async Task OpenAsync([NotNull] string providerName, string providerKey = null)
    {
        try
        {
            ProviderName = providerName;
            ProviderKey = providerKey;

            ToggleValues = new Dictionary<string, bool>();
            SelectionStringValues = new Dictionary<string, string>();

            Groups = (await FeatureAppService.GetAsync(ProviderName, ProviderKey))?.Groups;

            Groups ??= new List<FeatureGroupDto>();

            if (Groups.Any())
            {
                SelectedTabName = GetNormalizedGroupName(Groups.First().Name);
            }

            foreach (var featureGroupDto in Groups)
            {
                foreach (var featureDto in featureGroupDto.Features)
                {
                    if (featureDto.ValueType is ToggleStringValueType)
                    {
                        ToggleValues.Add(featureDto.Name, bool.Parse(featureDto.Value));
                    }

                    if (featureDto.ValueType is SelectionStringValueType)
                    {
                        SelectionStringValues.Add(featureDto.Name, featureDto.Value);
                    }
                }
            }

            //await InvokeAsync(Modal.Show);
        }
        catch (Exception ex)
        {
            await HandleErrorAsync(ex);
        }
    }
    protected virtual string GetNormalizedGroupName(string name)
    {
        return "FeatureGroup_" + name.Replace(".", "_");
    }
    protected virtual async Task SaveAsync()
    {
        try
        {
            var features = new UpdateFeaturesDto
                {
                    Features = Groups.SelectMany(g => g.Features).Select(f => new UpdateFeatureDto
                    {
                        Name = f.Name,
                        Value = f.ValueType is ToggleStringValueType ? ToggleValues[f.Name].ToString() :
                            f.ValueType is SelectionStringValueType ? SelectionStringValues[f.Name] : f.Value
                    }).ToList()
                };

            await FeatureAppService.UpdateAsync(ProviderName, ProviderKey, features);

            await CurrentApplicationConfigurationCacheResetService.ResetAsync();

            //await InvokeAsync(Modal.Hide);
        }
        catch (Exception ex)
        {
            await HandleErrorAsync(ex);
        }
    }
}
