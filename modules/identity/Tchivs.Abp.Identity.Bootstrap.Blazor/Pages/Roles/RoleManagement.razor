@page "/identity/roles"
@attribute [Authorize(IdentityPermissions.Roles.Default)]
@using Volo.Abp.Identity
@using Microsoft.AspNetCore.Authorization
@using Volo.Abp.Identity.Localization
@inherits BootstrapBlazorComponentBase
<TableEx TItem=IdentityRoleDto
         TAppService=IIdentityRoleAppService
         TKey=Guid TGetListInput=GetIdentityRolesInput
         TCreateInput=IdentityRoleCreateDto
         TUpdateInput=IdentityRoleUpdateDto
         AutoGenerateColumns="false"
         CreatePolicyName="@IdentityPermissions.Roles.Create"
         UpdatePolicyName="@IdentityPermissions.Roles.Update"
         DeletePolicyName="@IdentityPermissions.Roles.Delete">
    <TableColumns>
        <TableColumn @bind-Field="@context.Name" Text="@L["RoleName"]"/>
        <TableColumn @bind-Field="@context.IsDefault" Text="@L["DisplayName:IsDefault"]"/>
        <TableColumn @bind-Field="@context.IsPublic" Text="@L["DisplayName:IsPublic"]"/>
    </TableColumns>

    <EditTemplate>
        <div class="row g-3 form-inline">
            <div class="col-12">
                <BootstrapInput @bind-Value="@context.Name" placeholder="角色名称"
                                DisplayText=@L["RoleName"] maxlength="50"/>
            </div>
            <div class="col-12">
                <Checkbox @bind-Value="@context.IsDefault"
                          ShowAfterLabel="true"
                          ShowLabel="false"
                          DisplayText="@L["DisplayName:IsDefault"]"/>
            </div>
            <div class="col-12">
                <Checkbox @bind-Value="@context.IsPublic"
                          ShowAfterLabel="true"
                          ShowLabel="false"
                          DisplayText="@L["DisplayName:IsPublic"]"/>
            </div>
        </div>
    </EditTemplate>
    <RowButtonTemplate>
        @if (this.HasManagePermissionsPermission)
        {
            <Button Size="Size.ExtraSmall" Color="Color.Secondary" OnClick="@ClickPermissionCallback(context)" Icon="fa fa-shield" Text="@L["Permissions"]"/>
        }
    </RowButtonTemplate>
</TableEx>
<PermissionModal @ref=_permissionModal></PermissionModal>

@code {
    protected bool HasManagePermissionsPermission { get; set; }
    PermissionModal _permissionModal;

    public RoleManagement()
    {
        LocalizationResource = typeof(IdentityResource);
    }

    protected override async Task OnInitializedAsync()
    {
        HasManagePermissionsPermission =
            await AuthorizationService.IsGrantedAsync(IdentityPermissions.Roles.ManagePermissions);
    }

    EventCallback<MouseEventArgs> ClickPermissionCallback(IdentityRoleDto item) =>
        EventCallback.Factory.Create<MouseEventArgs>(this, () => ShowPermission(item));

    private async Task ShowPermission(IdentityRoleDto context)
    {
        _permissionModal.ProviderKey = context.Name.ToString();
        _permissionModal.ProviderName = "R";
        await _permissionModal.ShowAsync();
    }

}